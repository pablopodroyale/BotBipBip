/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const { TLRequest } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class EditPeerFoldersRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x6847d0ab;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x6847d0ab;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.folderPeers = args.folderPeers;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("abd04768","hex"),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.folderPeers.length),Buffer.concat(this.folderPeers.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _folder_peers;
        let _x;
        let len;
        reader.readInt();
        _folder_peers = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _folder_peers.push(_x);
            }
            return new this({folderPeers:_folder_peers})
        }
    }


class DeleteFolderRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x1c295881;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x1c295881;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.folderId = args.folderId;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("8158291c","hex"),
            struct.pack('<i', this.folderId),
            ])
        }
    static fromReader(reader) {
        let _folder_id;
        let _x;
        let len;
        _folder_id = reader.readInt();
        return new this({folderId:_folder_id})
    }
}

module.exports = {
    EditPeerFoldersRequest,
    DeleteFolderRequest,
};

/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const { TLRequest } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class ReadHistoryRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xcc104937;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xcc104937;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.maxId = args.maxId;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("374910cc","hex"),
            this.channel.getBytes(),
            struct.pack('<i', this.maxId),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _max_id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _max_id = reader.readInt();
        return new this({channel:_channel,
	maxId:_max_id})
    }
}


class DeleteMessagesRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x84c1fd4e;
    static SUBCLASS_OF_ID = 0xced3c06e;

    /**
    :returns messages.AffectedMessages: Instance of AffectedMessages
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x84c1fd4e;
        this.SUBCLASS_OF_ID = 0xced3c06e;

        this.channel = args.channel;
        this.id = args.id;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("4efdc184","hex"),
            this.channel.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.id.length),Buffer.concat(this.id.map(x => struct.pack('<i', x))),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        reader.readInt();
        _id = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.readInt();
            _id.push(_x);
            }
            return new this({channel:_channel,
	id:_id})
        }
    }


class DeleteUserHistoryRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xd10dd71b;
    static SUBCLASS_OF_ID = 0x2c49c116;

    /**
    :returns messages.AffectedHistory: Instance of AffectedHistory
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xd10dd71b;
        this.SUBCLASS_OF_ID = 0x2c49c116;

        this.channel = args.channel;
        this.userId = args.userId;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("1bd70dd1","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        return new this({channel:_channel,
	userId:_user_id})
    }
}


class ReportSpamRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xfe087810;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xfe087810;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.userId = args.userId;
        this.id = args.id;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("107808fe","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.id.length),Buffer.concat(this.id.map(x => struct.pack('<i', x))),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        reader.readInt();
        _id = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.readInt();
            _id.push(_x);
            }
            return new this({channel:_channel,
	userId:_user_id,
	id:_id})
        }
    }


class GetMessagesRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xad8c9a23;
    static SUBCLASS_OF_ID = 0xd4b40b5e;

    /**
    :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xad8c9a23;
        this.SUBCLASS_OF_ID = 0xd4b40b5e;

        this.channel = args.channel;
        this.id = args.id;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        const _tmp = [];for (const _x of this.id) {
            _tmp.push(utils.getInputMessage(_x));
        }
        this.id = _tmp;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("239a8cad","hex"),
            this.channel.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.id.length),Buffer.concat(this.id.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        reader.readInt();
        _id = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _id.push(_x);
            }
            return new this({channel:_channel,
	id:_id})
        }
    }


class GetParticipantsRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x123e05e9;
    static SUBCLASS_OF_ID = 0xe60a6e64;

    /**
    :returns channels.ChannelParticipants: Instance of either ChannelParticipants, ChannelParticipantsNotModified
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x123e05e9;
        this.SUBCLASS_OF_ID = 0xe60a6e64;

        this.channel = args.channel;
        this.filter = args.filter;
        this.offset = args.offset;
        this.limit = args.limit;
        this.hash = args.hash;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("e9053e12","hex"),
            this.channel.getBytes(),
            this.filter.getBytes(),
            struct.pack('<i', this.offset),
            struct.pack('<i', this.limit),
            struct.pack('<i', this.hash),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _filter;
        let _offset;
        let _limit;
        let _hash;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _filter = reader.tgReadObject();
        _offset = reader.readInt();
        _limit = reader.readInt();
        _hash = reader.readInt();
        return new this({channel:_channel,
	filter:_filter,
	offset:_offset,
	limit:_limit,
	hash:_hash})
    }
}


class GetParticipantRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x546dd7a6;
    static SUBCLASS_OF_ID = 0x6658151a;

    /**
    :returns channels.ChannelParticipant: Instance of ChannelParticipant
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x546dd7a6;
        this.SUBCLASS_OF_ID = 0x6658151a;

        this.channel = args.channel;
        this.userId = args.userId;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("a6d76d54","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        return new this({channel:_channel,
	userId:_user_id})
    }
}


class GetChannelsRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x0a7f6bbb;
    static SUBCLASS_OF_ID = 0x99d5cb14;

    /**
    :returns messages.Chats: Instance of either Chats, ChatsSlice
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x0a7f6bbb;
        this.SUBCLASS_OF_ID = 0x99d5cb14;

        this.id = args.id;
    }
    async resolve(client, utils) {
        const _tmp = [];for (const _x of this.id) {
            _tmp.push(utils.getInputChannel(await client.getInputEntity(_x)));
        }
        this.id = _tmp;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("bb6b7f0a","hex"),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.id.length),Buffer.concat(this.id.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _id;
        let _x;
        let len;
        reader.readInt();
        _id = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _id.push(_x);
            }
            return new this({id:_id})
        }
    }


class GetFullChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x08736a09;
    static SUBCLASS_OF_ID = 0x225a5109;

    /**
    :returns messages.ChatFull: Instance of ChatFull
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x08736a09;
        this.SUBCLASS_OF_ID = 0x225a5109;

        this.channel = args.channel;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("096a7308","hex"),
            this.channel.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        return new this({channel:_channel})
    }
}


class CreateChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x3d5fb10f;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x3d5fb10f;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.broadcast = args.broadcast || null;
        this.megagroup = args.megagroup || null;
        this.title = args.title;
        this.about = args.about;
        this.geoPoint = args.geoPoint || null;
        this.address = args.address || null;
    }
    getBytes() {
        if (!((this.geo_point || this.geo_point!==null && this.address || this.address!==null) && (this.geo_point===null || this.geo_point===false && this.address===null || this.address===false)))
	 throw new Error('geo_point, address paramaters must all be false-y or all true')
        return Buffer.concat([
            Buffer.from("0fb15f3d","hex"),
            struct.pack('<I', (this.broadcast === undefined || this.broadcast === false || this.broadcast === null) ? 0 : 1 | (this.megagroup === undefined || this.megagroup === false || this.megagroup === null) ? 0 : 2 | (this.geoPoint === undefined || this.geoPoint === false || this.geoPoint === null) ? 0 : 4 | (this.address === undefined || this.address === false || this.address === null) ? 0 : 4),
            TLObject.serializeBytes(this.title),
            TLObject.serializeBytes(this.about),
            (this.geoPoint === undefined || this.geoPoint === false || this.geoPoint ===null) ? Buffer.alloc(0) : [this.geoPoint.getBytes()],
            (this.address === undefined || this.address === false || this.address ===null) ? Buffer.alloc(0) : [TLObject.serializeBytes(this.address)],
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _broadcast;
        let _megagroup;
        let _title;
        let _about;
        let _geo_point;
        let _address;
        let _x;
        let len;
        let flags = reader.readInt();

        _broadcast = Boolean(flags & 1);
        _megagroup = Boolean(flags & 2);
        _title = reader.tgReadString();
        _about = reader.tgReadString();
        if (flags & 4) {
            _geo_point = reader.tgReadObject();
        }
        else {
            _geo_point = null
        }
        if (flags & 4) {
            _address = reader.tgReadString();
        }
        else {
            _address = null
        }
        return new this({broadcast:_broadcast,
	megagroup:_megagroup,
	title:_title,
	about:_about,
	geoPoint:_geo_point,
	address:_address})
    }
}


class EditAdminRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xd33c8902;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xd33c8902;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.userId = args.userId;
        this.adminRights = args.adminRights;
        this.rank = args.rank;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("02893cd3","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            this.adminRights.getBytes(),
            TLObject.serializeBytes(this.rank),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _admin_rights;
        let _rank;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        _admin_rights = reader.tgReadObject();
        _rank = reader.tgReadString();
        return new this({channel:_channel,
	userId:_user_id,
	adminRights:_admin_rights,
	rank:_rank})
    }
}


class EditTitleRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x566decd0;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x566decd0;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.title = args.title;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("d0ec6d56","hex"),
            this.channel.getBytes(),
            TLObject.serializeBytes(this.title),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _title;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _title = reader.tgReadString();
        return new this({channel:_channel,
	title:_title})
    }
}


class EditPhotoRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xf12e57c9;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf12e57c9;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.photo = args.photo;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.photo = utils.getInputChatPhoto(this.photo)
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("c9572ef1","hex"),
            this.channel.getBytes(),
            this.photo.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _photo;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _photo = reader.tgReadObject();
        return new this({channel:_channel,
	photo:_photo})
    }
}


class CheckUsernameRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x10e6bd2c;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x10e6bd2c;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.username = args.username;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("2cbde610","hex"),
            this.channel.getBytes(),
            TLObject.serializeBytes(this.username),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _username;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _username = reader.tgReadString();
        return new this({channel:_channel,
	username:_username})
    }
}


class UpdateUsernameRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x3514b3de;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x3514b3de;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.username = args.username;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("deb31435","hex"),
            this.channel.getBytes(),
            TLObject.serializeBytes(this.username),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _username;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _username = reader.tgReadString();
        return new this({channel:_channel,
	username:_username})
    }
}


class JoinChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x24b524c5;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x24b524c5;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("c524b524","hex"),
            this.channel.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        return new this({channel:_channel})
    }
}


class LeaveChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xf836aa95;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf836aa95;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("95aa36f8","hex"),
            this.channel.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        return new this({channel:_channel})
    }
}


class InviteToChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x199f3a6c;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x199f3a6c;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.users = args.users;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        const _tmp = [];for (const _x of this.users) {
            _tmp.push(utils.getInputUser(await client.getInputEntity(_x)));
        }
        this.users = _tmp;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("6c3a9f19","hex"),
            this.channel.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _users;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        reader.readInt();
        _users = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _users.push(_x);
            }
            return new this({channel:_channel,
	users:_users})
        }
    }


class DeleteChannelRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xc0111fe3;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xc0111fe3;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("e31f11c0","hex"),
            this.channel.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        return new this({channel:_channel})
    }
}


class ExportMessageLinkRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xceb77163;
    static SUBCLASS_OF_ID = 0xdee644cc;

    /**
    :returns ExportedMessageLink: Instance of ExportedMessageLink
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xceb77163;
        this.SUBCLASS_OF_ID = 0xdee644cc;

        this.channel = args.channel;
        this.id = args.id;
        this.grouped = args.grouped;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("6371b7ce","hex"),
            this.channel.getBytes(),
            struct.pack('<i', this.id),
            this.grouped ? 0xb5757299 : 0x379779bc,
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _id;
        let _grouped;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _id = reader.readInt();
        _grouped = reader.tgReadBool();
        return new this({channel:_channel,
	id:_id,
	grouped:_grouped})
    }
}


class ToggleSignaturesRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x1f69b606;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x1f69b606;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.enabled = args.enabled;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("06b6691f","hex"),
            this.channel.getBytes(),
            this.enabled ? 0xb5757299 : 0x379779bc,
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _enabled;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _enabled = reader.tgReadBool();
        return new this({channel:_channel,
	enabled:_enabled})
    }
}


class GetAdminedPublicChannelsRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xf8b036af;
    static SUBCLASS_OF_ID = 0x99d5cb14;

    /**
    :returns messages.Chats: Instance of either Chats, ChatsSlice
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf8b036af;
        this.SUBCLASS_OF_ID = 0x99d5cb14;

        this.byLocation = args.byLocation || null;
        this.checkLimit = args.checkLimit || null;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("af36b0f8","hex"),
            struct.pack('<I', (this.byLocation === undefined || this.byLocation === false || this.byLocation === null) ? 0 : 1 | (this.checkLimit === undefined || this.checkLimit === false || this.checkLimit === null) ? 0 : 2),
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _by_location;
        let _check_limit;
        let _x;
        let len;
        let flags = reader.readInt();

        _by_location = Boolean(flags & 1);
        _check_limit = Boolean(flags & 2);
        return new this({byLocation:_by_location,
	checkLimit:_check_limit})
    }
}


class EditBannedRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x72796912;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x72796912;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.userId = args.userId;
        this.bannedRights = args.bannedRights;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("12697972","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            this.bannedRights.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _banned_rights;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        _banned_rights = reader.tgReadObject();
        return new this({channel:_channel,
	userId:_user_id,
	bannedRights:_banned_rights})
    }
}


class GetAdminLogRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x33ddf480;
    static SUBCLASS_OF_ID = 0x51f076bc;

    /**
    :returns channels.AdminLogResults: Instance of AdminLogResults
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x33ddf480;
        this.SUBCLASS_OF_ID = 0x51f076bc;

        this.channel = args.channel;
        this.q = args.q;
        this.eventsFilter = args.eventsFilter || null;
        this.admins = args.admins || null;
        this.maxId = args.maxId;
        this.minId = args.minId;
        this.limit = args.limit;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        if (this.admins) {
            const _tmp = [];for (const _x of this.admins) {
                _tmp.push(utils.getInputUser(await client.getInputEntity(_x)));
            }
            this.admins = _tmp;
        }
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("80f4dd33","hex"),
            struct.pack('<I', (this.eventsFilter === undefined || this.eventsFilter === false || this.eventsFilter === null) ? 0 : 1 | (this.admins === undefined || this.admins === false || this.admins === null) ? 0 : 2),
            this.channel.getBytes(),
            TLObject.serializeBytes(this.q),
            (this.eventsFilter === undefined || this.eventsFilter === false || this.eventsFilter ===null) ? Buffer.alloc(0) : [this.eventsFilter.getBytes()],
            (this.admins === undefined || this.admins === false || this.admins ===null) ? Buffer.alloc(0) :Buffer.concat([Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.admins.length),Buffer.concat(this.admins.map(x => x.getBytes()))]),
            readBufferFromBigInt(this.maxId,8,true,true),
            readBufferFromBigInt(this.minId,8,true,true),
            struct.pack('<i', this.limit),
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _channel;
        let _q;
        let _events_filter;
        let _admins;
        let _max_id;
        let _min_id;
        let _limit;
        let _x;
        let len;
        let flags = reader.readInt();

        _channel = reader.tgReadObject();
        _q = reader.tgReadString();
        if (flags & 1) {
            _events_filter = reader.tgReadObject();
        }
        else {
            _events_filter = null
        }
        if (flags & 2) {
            reader.readInt();
            _admins = [];
            len = reader.readInt();
            for (let i=0;i<len;i++){
                _x = reader.tgReadObject();
                _admins.push(_x);
                }
            }
            else {
                _admins = null
            }
            _max_id = reader.readLong();
            _min_id = reader.readLong();
            _limit = reader.readInt();
            return new this({channel:_channel,
	q:_q,
	eventsFilter:_events_filter,
	admins:_admins,
	maxId:_max_id,
	minId:_min_id,
	limit:_limit})
        }
    }


class SetStickersRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xea8ca4f9;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xea8ca4f9;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.stickerset = args.stickerset;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("f9a48cea","hex"),
            this.channel.getBytes(),
            this.stickerset.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _stickerset;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _stickerset = reader.tgReadObject();
        return new this({channel:_channel,
	stickerset:_stickerset})
    }
}


class ReadMessageContentsRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xeab5dc38;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xeab5dc38;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.id = args.id;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("38dcb5ea","hex"),
            this.channel.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.id.length),Buffer.concat(this.id.map(x => struct.pack('<i', x))),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        reader.readInt();
        _id = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.readInt();
            _id.push(_x);
            }
            return new this({channel:_channel,
	id:_id})
        }
    }


class DeleteHistoryRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xaf369d42;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xaf369d42;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.maxId = args.maxId;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("429d36af","hex"),
            this.channel.getBytes(),
            struct.pack('<i', this.maxId),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _max_id;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _max_id = reader.readInt();
        return new this({channel:_channel,
	maxId:_max_id})
    }
}


class TogglePreHistoryHiddenRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xeabbb94c;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xeabbb94c;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.enabled = args.enabled;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("4cb9bbea","hex"),
            this.channel.getBytes(),
            this.enabled ? 0xb5757299 : 0x379779bc,
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _enabled;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _enabled = reader.tgReadBool();
        return new this({channel:_channel,
	enabled:_enabled})
    }
}


class GetLeftChannelsRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x8341ecc0;
    static SUBCLASS_OF_ID = 0x99d5cb14;

    /**
    :returns messages.Chats: Instance of either Chats, ChatsSlice
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x8341ecc0;
        this.SUBCLASS_OF_ID = 0x99d5cb14;

        this.offset = args.offset;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("c0ec4183","hex"),
            struct.pack('<i', this.offset),
            ])
        }
    static fromReader(reader) {
        let _offset;
        let _x;
        let len;
        _offset = reader.readInt();
        return new this({offset:_offset})
    }
}


class GetGroupsForDiscussionRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xf5dad378;
    static SUBCLASS_OF_ID = 0x99d5cb14;

    constructor() {
        super();
        this.CONSTRUCTOR_ID = 0xf5dad378;
        this.SUBCLASS_OF_ID = 0x99d5cb14;

    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("78d3daf5","hex"),
            ])
        }
    static fromReader(reader) {
        let _x;
        let len;
        return new this({})
    }
}


class SetDiscussionGroupRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x40582bb2;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x40582bb2;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.broadcast = args.broadcast;
        this.group = args.group;
    }
    async resolve(client, utils) {
        this.broadcast = utils.getInputChannel(await client.getInputEntity(this.broadcast))
        this.group = utils.getInputChannel(await client.getInputEntity(this.group))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("b22b5840","hex"),
            this.broadcast.getBytes(),
            this.group.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _broadcast;
        let _group;
        let _x;
        let len;
        _broadcast = reader.tgReadObject();
        _group = reader.tgReadObject();
        return new this({broadcast:_broadcast,
	group:_group})
    }
}


class EditCreatorRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x8f38cd1f;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x8f38cd1f;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.userId = args.userId;
        this.password = args.password;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("1fcd388f","hex"),
            this.channel.getBytes(),
            this.userId.getBytes(),
            this.password.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _user_id;
        let _password;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _user_id = reader.tgReadObject();
        _password = reader.tgReadObject();
        return new this({channel:_channel,
	userId:_user_id,
	password:_password})
    }
}


class EditLocationRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x58e63f6d;
    static SUBCLASS_OF_ID = 0xf5b399ac;

    /**
    :returns Bool: This type has no constructors.
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x58e63f6d;
        this.SUBCLASS_OF_ID = 0xf5b399ac;

        this.channel = args.channel;
        this.geoPoint = args.geoPoint;
        this.address = args.address;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("6d3fe658","hex"),
            this.channel.getBytes(),
            this.geoPoint.getBytes(),
            TLObject.serializeBytes(this.address),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _geo_point;
        let _address;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _geo_point = reader.tgReadObject();
        _address = reader.tgReadString();
        return new this({channel:_channel,
	geoPoint:_geo_point,
	address:_address})
    }
}


class ToggleSlowModeRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xedd49ef0;
    static SUBCLASS_OF_ID = 0x8af52aac;

    /**
    :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xedd49ef0;
        this.SUBCLASS_OF_ID = 0x8af52aac;

        this.channel = args.channel;
        this.seconds = args.seconds;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("f09ed4ed","hex"),
            this.channel.getBytes(),
            struct.pack('<i', this.seconds),
            ])
        }
    static fromReader(reader) {
        let _channel;
        let _seconds;
        let _x;
        let len;
        _channel = reader.tgReadObject();
        _seconds = reader.readInt();
        return new this({channel:_channel,
	seconds:_seconds})
    }
}

module.exports = {
    ReadHistoryRequest,
    DeleteMessagesRequest,
    DeleteUserHistoryRequest,
    ReportSpamRequest,
    GetMessagesRequest,
    GetParticipantsRequest,
    GetParticipantRequest,
    GetChannelsRequest,
    GetFullChannelRequest,
    CreateChannelRequest,
    EditAdminRequest,
    EditTitleRequest,
    EditPhotoRequest,
    CheckUsernameRequest,
    UpdateUsernameRequest,
    JoinChannelRequest,
    LeaveChannelRequest,
    InviteToChannelRequest,
    DeleteChannelRequest,
    ExportMessageLinkRequest,
    ToggleSignaturesRequest,
    GetAdminedPublicChannelsRequest,
    EditBannedRequest,
    GetAdminLogRequest,
    SetStickersRequest,
    ReadMessageContentsRequest,
    DeleteHistoryRequest,
    TogglePreHistoryHiddenRequest,
    GetLeftChannelsRequest,
    GetGroupsForDiscussionRequest,
    SetDiscussionGroupRequest,
    EditCreatorRequest,
    EditLocationRequest,
    ToggleSlowModeRequest,
};

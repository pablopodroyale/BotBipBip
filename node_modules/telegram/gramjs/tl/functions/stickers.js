/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const { TLRequest } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class CreateStickerSetRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x9bd86e6a;
    static SUBCLASS_OF_ID = 0x9b704a5a;

    /**
    :returns messages.StickerSet: Instance of StickerSet
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x9bd86e6a;
        this.SUBCLASS_OF_ID = 0x9b704a5a;

        this.masks = args.masks || null;
        this.userId = args.userId;
        this.title = args.title;
        this.shortName = args.shortName;
        this.stickers = args.stickers;
    }
    async resolve(client, utils) {
        this.user_id = utils.getInputUser(await client.getInputEntity(this.userId))
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("6a6ed89b","hex"),
            struct.pack('<I', (this.masks === undefined || this.masks === false || this.masks === null) ? 0 : 1),
            this.userId.getBytes(),
            TLObject.serializeBytes(this.title),
            TLObject.serializeBytes(this.shortName),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.stickers.length),Buffer.concat(this.stickers.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _masks;
        let _user_id;
        let _title;
        let _short_name;
        let _stickers;
        let _x;
        let len;
        let flags = reader.readInt();

        _masks = Boolean(flags & 1);
        _user_id = reader.tgReadObject();
        _title = reader.tgReadString();
        _short_name = reader.tgReadString();
        reader.readInt();
        _stickers = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _stickers.push(_x);
            }
            return new this({masks:_masks,
	userId:_user_id,
	title:_title,
	shortName:_short_name,
	stickers:_stickers})
        }
    }


class RemoveStickerFromSetRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xf7760f51;
    static SUBCLASS_OF_ID = 0x9b704a5a;

    /**
    :returns messages.StickerSet: Instance of StickerSet
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf7760f51;
        this.SUBCLASS_OF_ID = 0x9b704a5a;

        this.sticker = args.sticker;
    }
    async resolve(client, utils) {
        this.sticker = utils.getInputDocument(this.sticker)
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("510f76f7","hex"),
            this.sticker.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _sticker;
        let _x;
        let len;
        _sticker = reader.tgReadObject();
        return new this({sticker:_sticker})
    }
}


class ChangeStickerPositionRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xffb6d4ca;
    static SUBCLASS_OF_ID = 0x9b704a5a;

    /**
    :returns messages.StickerSet: Instance of StickerSet
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xffb6d4ca;
        this.SUBCLASS_OF_ID = 0x9b704a5a;

        this.sticker = args.sticker;
        this.position = args.position;
    }
    async resolve(client, utils) {
        this.sticker = utils.getInputDocument(this.sticker)
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("cad4b6ff","hex"),
            this.sticker.getBytes(),
            struct.pack('<i', this.position),
            ])
        }
    static fromReader(reader) {
        let _sticker;
        let _position;
        let _x;
        let len;
        _sticker = reader.tgReadObject();
        _position = reader.readInt();
        return new this({sticker:_sticker,
	position:_position})
    }
}


class AddStickerToSetRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x8653febe;
    static SUBCLASS_OF_ID = 0x9b704a5a;

    /**
    :returns messages.StickerSet: Instance of StickerSet
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x8653febe;
        this.SUBCLASS_OF_ID = 0x9b704a5a;

        this.stickerset = args.stickerset;
        this.sticker = args.sticker;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("befe5386","hex"),
            this.stickerset.getBytes(),
            this.sticker.getBytes(),
            ])
        }
    static fromReader(reader) {
        let _stickerset;
        let _sticker;
        let _x;
        let len;
        _stickerset = reader.tgReadObject();
        _sticker = reader.tgReadObject();
        return new this({stickerset:_stickerset,
	sticker:_sticker})
    }
}

module.exports = {
    CreateStickerSetRequest,
    RemoveStickerFromSetRequest,
    ChangeStickerPositionRequest,
    AddStickerToSetRequest,
};

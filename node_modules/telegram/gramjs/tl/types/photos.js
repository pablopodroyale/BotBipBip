/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class Photos extends TLObject {
    static CONSTRUCTOR_ID = 0x8dca6aa5;
    static SUBCLASS_OF_ID = 0x27cfb967;

    /**
    Constructor for photos.Photos: Instance of either Photos, PhotosSlice
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x8dca6aa5;
        this.SUBCLASS_OF_ID = 0x27cfb967;

        this.photos = args.photos;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("a56aca8d","hex"),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.photos.length),Buffer.concat(this.photos.map(x => x.getBytes())),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _photos;
        let _users;
        let _x;
        let len;
        reader.readInt();
        _photos = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _photos.push(_x);
            }
            reader.readInt();
            _users = [];
            len = reader.readInt();
            for (let i=0;i<len;i++){
                _x = reader.tgReadObject();
                _users.push(_x);
                }
                return new this({photos:_photos,
	users:_users})
            }
        }


class PhotosSlice extends TLObject {
    static CONSTRUCTOR_ID = 0x15051f54;
    static SUBCLASS_OF_ID = 0x27cfb967;

    /**
    Constructor for photos.Photos: Instance of either Photos, PhotosSlice
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x15051f54;
        this.SUBCLASS_OF_ID = 0x27cfb967;

        this.count = args.count;
        this.photos = args.photos;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("541f0515","hex"),
            struct.pack('<i', this.count),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.photos.length),Buffer.concat(this.photos.map(x => x.getBytes())),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _count;
        let _photos;
        let _users;
        let _x;
        let len;
        _count = reader.readInt();
        reader.readInt();
        _photos = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _photos.push(_x);
            }
            reader.readInt();
            _users = [];
            len = reader.readInt();
            for (let i=0;i<len;i++){
                _x = reader.tgReadObject();
                _users.push(_x);
                }
                return new this({count:_count,
	photos:_photos,
	users:_users})
            }
        }


class Photo extends TLObject {
    static CONSTRUCTOR_ID = 0x20212ca8;
    static SUBCLASS_OF_ID = 0xc292bd24;

    /**
    Constructor for photos.Photo: Instance of Photo
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x20212ca8;
        this.SUBCLASS_OF_ID = 0xc292bd24;

        this.photo = args.photo;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("a82c2120","hex"),
            this.photo.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _photo;
        let _users;
        let _x;
        let len;
        _photo = reader.tgReadObject();
        reader.readInt();
        _users = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _users.push(_x);
            }
            return new this({photo:_photo,
	users:_users})
        }
    }

module.exports = {
    Photos,
    PhotosSlice,
    Photo,
};

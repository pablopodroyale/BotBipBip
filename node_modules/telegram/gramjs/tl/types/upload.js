/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class File extends TLObject {
    static CONSTRUCTOR_ID = 0x096a18d5;
    static SUBCLASS_OF_ID = 0x6c9bd728;

    /**
    Constructor for upload.File: Instance of either File, FileCdnRedirect
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x096a18d5;
        this.SUBCLASS_OF_ID = 0x6c9bd728;

        this.type = args.type;
        this.mtime = args.mtime;
        this.bytes = args.bytes;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("d5186a09","hex"),
            this.type.getBytes(),
            struct.pack('<i', this.mtime),
            TLObject.serializeBytes(this.bytes),
            ])
        }
    static fromReader(reader) {
        let _type;
        let _mtime;
        let _bytes;
        let _x;
        let len;
        _type = reader.tgReadObject();
        _mtime = reader.readInt();
        _bytes = reader.tgReadBytes();
        return new this({type:_type,
	mtime:_mtime,
	bytes:_bytes})
    }
}


class FileCdnRedirect extends TLObject {
    static CONSTRUCTOR_ID = 0xf18cda44;
    static SUBCLASS_OF_ID = 0x6c9bd728;

    /**
    Constructor for upload.File: Instance of either File, FileCdnRedirect
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf18cda44;
        this.SUBCLASS_OF_ID = 0x6c9bd728;

        this.dcId = args.dcId;
        this.fileToken = args.fileToken;
        this.encryptionKey = args.encryptionKey;
        this.encryptionIv = args.encryptionIv;
        this.fileHashes = args.fileHashes;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("44da8cf1","hex"),
            struct.pack('<i', this.dcId),
            TLObject.serializeBytes(this.fileToken),
            TLObject.serializeBytes(this.encryptionKey),
            TLObject.serializeBytes(this.encryptionIv),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.fileHashes.length),Buffer.concat(this.fileHashes.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _dc_id;
        let _file_token;
        let _encryption_key;
        let _encryption_iv;
        let _file_hashes;
        let _x;
        let len;
        _dc_id = reader.readInt();
        _file_token = reader.tgReadBytes();
        _encryption_key = reader.tgReadBytes();
        _encryption_iv = reader.tgReadBytes();
        reader.readInt();
        _file_hashes = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _file_hashes.push(_x);
            }
            return new this({dcId:_dc_id,
	fileToken:_file_token,
	encryptionKey:_encryption_key,
	encryptionIv:_encryption_iv,
	fileHashes:_file_hashes})
        }
    }


class WebFile extends TLObject {
    static CONSTRUCTOR_ID = 0x21e753bc;
    static SUBCLASS_OF_ID = 0x68f17f51;

    /**
    Constructor for upload.WebFile: Instance of WebFile
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x21e753bc;
        this.SUBCLASS_OF_ID = 0x68f17f51;

        this.size = args.size;
        this.mimeType = args.mimeType;
        this.fileType = args.fileType;
        this.mtime = args.mtime;
        this.bytes = args.bytes;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("bc53e721","hex"),
            struct.pack('<i', this.size),
            TLObject.serializeBytes(this.mimeType),
            this.fileType.getBytes(),
            struct.pack('<i', this.mtime),
            TLObject.serializeBytes(this.bytes),
            ])
        }
    static fromReader(reader) {
        let _size;
        let _mime_type;
        let _file_type;
        let _mtime;
        let _bytes;
        let _x;
        let len;
        _size = reader.readInt();
        _mime_type = reader.tgReadString();
        _file_type = reader.tgReadObject();
        _mtime = reader.readInt();
        _bytes = reader.tgReadBytes();
        return new this({size:_size,
	mimeType:_mime_type,
	fileType:_file_type,
	mtime:_mtime,
	bytes:_bytes})
    }
}


class CdnFileReuploadNeeded extends TLObject {
    static CONSTRUCTOR_ID = 0xeea8e46e;
    static SUBCLASS_OF_ID = 0xf5ccf928;

    /**
    Constructor for upload.CdnFile: Instance of either CdnFileReuploadNeeded, CdnFile
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xeea8e46e;
        this.SUBCLASS_OF_ID = 0xf5ccf928;

        this.requestToken = args.requestToken;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("6ee4a8ee","hex"),
            TLObject.serializeBytes(this.requestToken),
            ])
        }
    static fromReader(reader) {
        let _request_token;
        let _x;
        let len;
        _request_token = reader.tgReadBytes();
        return new this({requestToken:_request_token})
    }
}


class CdnFile extends TLObject {
    static CONSTRUCTOR_ID = 0xa99fca4f;
    static SUBCLASS_OF_ID = 0xf5ccf928;

    /**
    Constructor for upload.CdnFile: Instance of either CdnFileReuploadNeeded, CdnFile
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xa99fca4f;
        this.SUBCLASS_OF_ID = 0xf5ccf928;

        this.bytes = args.bytes;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("4fca9fa9","hex"),
            TLObject.serializeBytes(this.bytes),
            ])
        }
    static fromReader(reader) {
        let _bytes;
        let _x;
        let len;
        _bytes = reader.tgReadBytes();
        return new this({bytes:_bytes})
    }
}

module.exports = {
    File,
    FileCdnRedirect,
    WebFile,
    CdnFileReuploadNeeded,
    CdnFile,
};

/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class ChannelParticipants extends TLObject {
    static CONSTRUCTOR_ID = 0xf56ee2a8;
    static SUBCLASS_OF_ID = 0xe60a6e64;

    /**
    Constructor for channels.ChannelParticipants: Instance of either ChannelParticipants, ChannelParticipantsNotModified
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xf56ee2a8;
        this.SUBCLASS_OF_ID = 0xe60a6e64;

        this.count = args.count;
        this.participants = args.participants;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("a8e26ef5","hex"),
            struct.pack('<i', this.count),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.participants.length),Buffer.concat(this.participants.map(x => x.getBytes())),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _count;
        let _participants;
        let _users;
        let _x;
        let len;
        _count = reader.readInt();
        reader.readInt();
        _participants = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _participants.push(_x);
            }
            reader.readInt();
            _users = [];
            len = reader.readInt();
            for (let i=0;i<len;i++){
                _x = reader.tgReadObject();
                _users.push(_x);
                }
                return new this({count:_count,
	participants:_participants,
	users:_users})
            }
        }


class ChannelParticipantsNotModified extends TLObject {
    static CONSTRUCTOR_ID = 0xf0173fe9;
    static SUBCLASS_OF_ID = 0xe60a6e64;

    constructor() {
        super();
        this.CONSTRUCTOR_ID = 0xf0173fe9;
        this.SUBCLASS_OF_ID = 0xe60a6e64;

    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("e93f17f0","hex"),
            ])
        }
    static fromReader(reader) {
        let _x;
        let len;
        return new this({})
    }
}


class ChannelParticipant extends TLObject {
    static CONSTRUCTOR_ID = 0xd0d9b163;
    static SUBCLASS_OF_ID = 0x6658151a;

    /**
    Constructor for channels.ChannelParticipant: Instance of ChannelParticipant
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xd0d9b163;
        this.SUBCLASS_OF_ID = 0x6658151a;

        this.participant = args.participant;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("63b1d9d0","hex"),
            this.participant.getBytes(),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _participant;
        let _users;
        let _x;
        let len;
        _participant = reader.tgReadObject();
        reader.readInt();
        _users = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _users.push(_x);
            }
            return new this({participant:_participant,
	users:_users})
        }
    }


class AdminLogResults extends TLObject {
    static CONSTRUCTOR_ID = 0xed8af74d;
    static SUBCLASS_OF_ID = 0x51f076bc;

    /**
    Constructor for channels.AdminLogResults: Instance of AdminLogResults
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0xed8af74d;
        this.SUBCLASS_OF_ID = 0x51f076bc;

        this.events = args.events;
        this.chats = args.chats;
        this.users = args.users;
    }
    getBytes() {
        return Buffer.concat([
            Buffer.from("4df78aed","hex"),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.events.length),Buffer.concat(this.events.map(x => x.getBytes())),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.chats.length),Buffer.concat(this.chats.map(x => x.getBytes())),
            Buffer.from('15c4b51c', 'hex'),struct.pack('<i', this.users.length),Buffer.concat(this.users.map(x => x.getBytes())),
            ])
        }
    static fromReader(reader) {
        let _events;
        let _chats;
        let _users;
        let _x;
        let len;
        reader.readInt();
        _events = [];
        len = reader.readInt();
        for (let i=0;i<len;i++){
            _x = reader.tgReadObject();
            _events.push(_x);
            }
            reader.readInt();
            _chats = [];
            len = reader.readInt();
            for (let i=0;i<len;i++){
                _x = reader.tgReadObject();
                _chats.push(_x);
                }
                reader.readInt();
                _users = [];
                len = reader.readInt();
                for (let i=0;i<len;i++){
                    _x = reader.tgReadObject();
                    _users.push(_x);
                    }
                    return new this({events:_events,
	chats:_chats,
	users:_users})
                }
            }

module.exports = {
    ChannelParticipants,
    ChannelParticipantsNotModified,
    ChannelParticipant,
    AdminLogResults,
};
